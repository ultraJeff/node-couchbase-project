"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
/* eslint jsdoc/require-jsdoc: off */
const binding_1 = __importDefault(require("./binding"));
const bindingutilities_1 = require("./bindingutilities");
class Connection {
    constructor() {
        this._inst = new binding_1.default.Connection();
    }
    get inst() {
        return this._inst;
    }
    connect(...args) {
        return this._proxyToConn(this._inst, this._inst.connect, ...args);
    }
    openBucket(...args) {
        return this._proxyToConn(this._inst, this._inst.openBucket, ...args);
    }
    shutdown(...args) {
        return this._proxyToConn(this._inst, this._inst.shutdown, ...args);
    }
    get(...args) {
        return this._proxyToConn(this._inst, this._inst.get, ...args);
    }
    exists(...args) {
        return this._proxyToConn(this._inst, this._inst.exists, ...args);
    }
    getAndLock(...args) {
        return this._proxyToConn(this._inst, this._inst.getAndLock, ...args);
    }
    getAndTouch(...args) {
        return this._proxyToConn(this._inst, this._inst.getAndTouch, ...args);
    }
    insert(...args) {
        return this._proxyToConn(this._inst, this._inst.insert, ...args);
    }
    upsert(...args) {
        return this._proxyToConn(this._inst, this._inst.upsert, ...args);
    }
    replace(...args) {
        return this._proxyToConn(this._inst, this._inst.replace, ...args);
    }
    remove(...args) {
        return this._proxyToConn(this._inst, this._inst.remove, ...args);
    }
    touch(...args) {
        return this._proxyToConn(this._inst, this._inst.touch, ...args);
    }
    unlock(...args) {
        return this._proxyToConn(this._inst, this._inst.unlock, ...args);
    }
    append(...args) {
        return this._proxyToConn(this._inst, this._inst.append, ...args);
    }
    prepend(...args) {
        return this._proxyToConn(this._inst, this._inst.prepend, ...args);
    }
    increment(...args) {
        return this._proxyToConn(this._inst, this._inst.increment, ...args);
    }
    decrement(...args) {
        return this._proxyToConn(this._inst, this._inst.decrement, ...args);
    }
    lookupIn(...args) {
        return this._proxyToConn(this._inst, this._inst.lookupIn, ...args);
    }
    mutateIn(...args) {
        return this._proxyToConn(this._inst, this._inst.mutateIn, ...args);
    }
    viewQuery(...args) {
        return this._proxyToConn(this._inst, this._inst.viewQuery, ...args);
    }
    query(...args) {
        return this._proxyToConn(this._inst, this._inst.query, ...args);
    }
    analyticsQuery(...args) {
        return this._proxyToConn(this._inst, this._inst.analyticsQuery, ...args);
    }
    searchQuery(...args) {
        return this._proxyToConn(this._inst, this._inst.searchQuery, ...args);
    }
    httpRequest(...args) {
        return this._proxyToConn(this._inst, this._inst.httpRequest, ...args);
    }
    diagnostics(...args) {
        return this._proxyToConn(this._inst, this._inst.diagnostics, ...args);
    }
    ping(...args) {
        return this._proxyToConn(this._inst, this._inst.ping, ...args);
    }
    _proxyToConn(thisArg, fn, ...newArgs) {
        const argsManip = newArgs;
        const callback = argsManip.pop();
        argsManip.push((err, ...cbArgs) => {
            const translatedErr = (0, bindingutilities_1.errorFromCpp)(err);
            callback.apply(undefined, [translatedErr, ...cbArgs]);
        });
        const wrappedArgs = argsManip;
        fn.apply(thisArg, wrappedArgs);
    }
}
exports.Connection = Connection;
