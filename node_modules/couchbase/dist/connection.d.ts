import { CppConnection, CppError } from './binding';
declare type MergeArgs<A, B> = A extends [...infer Params] ? [...Params, ...(B extends [...infer Params2] ? Params2 : [])] : never;
declare type CppCbToNew<T extends (...fargs: any[]) => void> = T extends (...fargs: [
    ...infer FArgs,
    (err: CppError | null, ...cbArgs: infer CbArgs) => void
]) => void ? [
    ...fargs: MergeArgs<FArgs, [
        callback: (err: Error | null, ...cbArgs: CbArgs) => void
    ]>
] : never;
export declare class Connection {
    private _inst;
    constructor();
    get inst(): CppConnection;
    connect(...args: CppCbToNew<CppConnection['connect']>): ReturnType<CppConnection['connect']>;
    openBucket(...args: CppCbToNew<CppConnection['openBucket']>): ReturnType<CppConnection['openBucket']>;
    shutdown(...args: CppCbToNew<CppConnection['shutdown']>): ReturnType<CppConnection['shutdown']>;
    get(...args: CppCbToNew<CppConnection['get']>): ReturnType<CppConnection['get']>;
    exists(...args: CppCbToNew<CppConnection['exists']>): ReturnType<CppConnection['exists']>;
    getAndLock(...args: CppCbToNew<CppConnection['getAndLock']>): ReturnType<CppConnection['getAndLock']>;
    getAndTouch(...args: CppCbToNew<CppConnection['getAndTouch']>): ReturnType<CppConnection['getAndTouch']>;
    insert(...args: CppCbToNew<CppConnection['insert']>): ReturnType<CppConnection['insert']>;
    upsert(...args: CppCbToNew<CppConnection['upsert']>): ReturnType<CppConnection['upsert']>;
    replace(...args: CppCbToNew<CppConnection['replace']>): ReturnType<CppConnection['replace']>;
    remove(...args: CppCbToNew<CppConnection['remove']>): ReturnType<CppConnection['remove']>;
    touch(...args: CppCbToNew<CppConnection['touch']>): ReturnType<CppConnection['touch']>;
    unlock(...args: CppCbToNew<CppConnection['unlock']>): ReturnType<CppConnection['unlock']>;
    append(...args: CppCbToNew<CppConnection['append']>): ReturnType<CppConnection['append']>;
    prepend(...args: CppCbToNew<CppConnection['prepend']>): ReturnType<CppConnection['prepend']>;
    increment(...args: CppCbToNew<CppConnection['increment']>): ReturnType<CppConnection['increment']>;
    decrement(...args: CppCbToNew<CppConnection['decrement']>): ReturnType<CppConnection['decrement']>;
    lookupIn(...args: CppCbToNew<CppConnection['lookupIn']>): ReturnType<CppConnection['lookupIn']>;
    mutateIn(...args: CppCbToNew<CppConnection['mutateIn']>): ReturnType<CppConnection['mutateIn']>;
    viewQuery(...args: CppCbToNew<CppConnection['viewQuery']>): ReturnType<CppConnection['viewQuery']>;
    query(...args: CppCbToNew<CppConnection['query']>): ReturnType<CppConnection['query']>;
    analyticsQuery(...args: CppCbToNew<CppConnection['analyticsQuery']>): ReturnType<CppConnection['analyticsQuery']>;
    searchQuery(...args: CppCbToNew<CppConnection['searchQuery']>): ReturnType<CppConnection['searchQuery']>;
    httpRequest(...args: CppCbToNew<CppConnection['httpRequest']>): ReturnType<CppConnection['httpRequest']>;
    diagnostics(...args: CppCbToNew<CppConnection['diagnostics']>): ReturnType<CppConnection['diagnostics']>;
    ping(...args: CppCbToNew<CppConnection['ping']>): ReturnType<CppConnection['ping']>;
    private _proxyToConn;
}
export {};
